# C:\Users\marco\Xubudget\Xubudget\services\pi2_assistant\ai\tools\language_detector.py
# REM (WHY): detectar idioma automaticamente para responder na mesma lÃ­ngua

import re
from typing import Dict, List

# Palavras-chave para detectar idiomas
LANGUAGE_PATTERNS = {
    "portuguese": [
        "oi", "olÃ¡", "bom dia", "boa tarde", "boa noite", "obrigado", "obrigada",
        "por favor", "desculpe", "desculpa", "sim", "nÃ£o", "talvez", "claro",
        "entendi", "compreendi", "perfeito", "Ã³timo", "excelente", "legal",
        "gastei", "gastou", "comprei", "comprou", "dinheiro", "orÃ§amento",
        "quanto", "quando", "onde", "como", "por que", "para que", "qual",
        "quero", "preciso", "posso", "devo", "vou", "estou", "sou", "tenho",
        "fiz", "fez", "vou fazer", "vai fazer", "pode", "consegue", "ajuda",
        "ajudar", "me ajuda", "pode ajudar", "consegue ajudar", "obrigado",
        "valeu", "brigado", "vlw", "tmj", "beleza", "tranquilo", "suave"
    ],
    "english": [
        "hi", "hello", "good morning", "good afternoon", "good evening", "thanks", "thank you",
        "please", "sorry", "excuse me", "yes", "no", "maybe", "sure", "okay", "ok",
        "understood", "got it", "perfect", "great", "excellent", "awesome", "cool",
        "spent", "spend", "bought", "buy", "money", "budget", "finance", "financial",
        "how much", "when", "where", "how", "why", "what", "which", "who",
        "want", "need", "can", "should", "will", "am", "is", "are", "have", "has",
        "did", "do", "does", "will do", "can you", "help", "help me", "please help",
        "thanks", "thank you", "thx", "ty", "np", "no problem", "sure thing"
    ],
    "spanish": [
        "hola", "buenos dÃ­as", "buenas tardes", "buenas noches", "gracias", "por favor",
        "perdÃ³n", "disculpe", "sÃ­", "no", "tal vez", "claro", "entendido", "perfecto",
        "excelente", "genial", "gastÃ©", "gastÃ³", "comprÃ©", "comprÃ³", "dinero", "presupuesto",
        "cuÃ¡nto", "cuÃ¡ndo", "dÃ³nde", "cÃ³mo", "por quÃ©", "para quÃ©", "cuÃ¡l", "quiÃ©n",
        "quiero", "necesito", "puedo", "debo", "voy", "estoy", "soy", "tengo", "hice",
        "hizo", "voy a hacer", "va a hacer", "puede", "puedes", "ayuda", "ayudar",
        "me ayuda", "puede ayudar", "gracias", "vale", "ok", "perfecto", "genial",
        "como", "estas", "estÃ¡s", "como estas", "como estÃ¡s", "que tal", "quÃ© tal",
        "bien", "mal", "regular", "muy bien", "muy mal", "todo bien", "todo mal"
    ],
    "french": [
        "salut", "bonjour", "bonsoir", "merci", "s'il vous plaÃ®t", "pardon", "excusez-moi",
        "oui", "non", "peut-Ãªtre", "bien sÃ»r", "compris", "parfait", "excellent", "gÃ©nial",
        "j'ai dÃ©pensÃ©", "a dÃ©pensÃ©", "j'ai achetÃ©", "a achetÃ©", "argent", "budget",
        "combien", "quand", "oÃ¹", "comment", "pourquoi", "pour quoi", "quel", "qui",
        "je veux", "j'ai besoin", "je peux", "je dois", "je vais", "je suis", "j'ai",
        "j'ai fait", "a fait", "je vais faire", "va faire", "peut", "peux", "aide",
        "aider", "peux m'aider", "peut aider", "merci", "ok", "parfait", "gÃ©nial"
    ]
}

def detect_language(text: str) -> str:
    """
    Detecta o idioma do texto baseado em palavras-chave comuns.
    Retorna o cÃ³digo do idioma ou 'portuguese' como padrÃ£o.
    """
    if not text or not isinstance(text, str):
        return "portuguese"
    
    text_lower = text.lower().strip()
    
    # Remove pontuaÃ§Ã£o e caracteres especiais
    text_clean = re.sub(r'[^\w\s]', ' ', text_lower)
    words = text_clean.split()
    
    if not words:
        return "portuguese"
    
    # Conta ocorrÃªncias de cada idioma
    language_scores = {}
    
    for lang, patterns in LANGUAGE_PATTERNS.items():
        score = 0
        for word in words:
            if word in patterns:
                score += 1
        language_scores[lang] = score
    
    # Retorna o idioma com maior pontuaÃ§Ã£o
    if language_scores:
        detected_lang = max(language_scores, key=language_scores.get)
        if language_scores[detected_lang] > 0:
            return detected_lang
    
    # Se nÃ£o detectou nada, verifica caracteres especiais
    if any(char in text for char in "Ã±"):
        return "spanish"
    elif any(char in text for char in "Ã§Ã£ÃµÃ¡Ã©Ã­Ã³ÃºÃ¢ÃªÃ´Ã Ã¨Ã¬Ã²Ã¹"):
        return "portuguese"
    elif any(char in text for char in "Ã Ã¢Ã¤Ã©Ã¨ÃªÃ«Ã¯Ã®Ã´Ã¶Ã¹Ã»Ã¼Ã¿Ã§"):
        return "french"
    
    # PadrÃ£o: portuguÃªs
    return "portuguese"

def get_language_instructions(language: str) -> str:
    """
    Retorna instruÃ§Ãµes especÃ­ficas para cada idioma.
    """
    instructions = {
        "portuguese": "Responda SEMPRE em portuguÃªs do Brasil. Use tom familiar e direto.",
        "english": "Respond ALWAYS in English. Use a friendly and direct tone.",
        "spanish": "Responde SIEMPRE en espaÃ±ol. Usa un tono familiar y directo.",
        "french": "RÃ©ponds TOUJOURS en franÃ§ais. Utilise un ton familier et direct."
    }
    
    return instructions.get(language, instructions["portuguese"])

def get_language_greeting(language: str) -> str:
    """
    Retorna saudaÃ§Ã£o especÃ­fica para cada idioma.
    """
    greetings = {
        "portuguese": "Eu sou a Xuzinha ğŸ’œ, o amor do Xuzinho! Como posso ajudar com suas finanÃ§as?",
        "english": "I'm Xuzinha ğŸ’œ, Xuzinho's love! How can I help you with your finances?",
        "spanish": "Â¡Soy Xuzinha ğŸ’œ, el amor de Xuzinho! Â¿CÃ³mo puedo ayudarte con tus finanzas?",
        "french": "Je suis Xuzinha ğŸ’œ, l'amour de Xuzinho ! Comment puis-je t'aider avec tes finances ?"
    }
    
    return greetings.get(language, greetings["portuguese"])
